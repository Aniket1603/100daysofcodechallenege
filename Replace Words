import java.util.ArrayList;
import java.util.List;

class TrieNode {
    TrieNode[] edges;
    boolean endOfWord;

    TrieNode() {
        edges = new TrieNode[26];
        endOfWord = false;
    }
}

class Trie {
    TrieNode root;

    Trie() {
        root = new TrieNode();
    }

    void add(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            if (node.edges[c - 'a'] == null) {
                node.edges[c - 'a'] = new TrieNode();
            }
            node = node.edges[c - 'a'];
        }
        node.endOfWord = true;
    }

    String searchPrefix(String word) {
        TrieNode node = root;
        StringBuilder ans = new StringBuilder();
        for (char c : word.toCharArray()) {
            ans.append(c);
            if (node.edges[c - 'a'] == null) {
                return word;
            }
            node = node.edges[c - 'a'];
            if (node.endOfWord) {
                return ans.toString();
            }
        }
        return word;
    }
}

public class Solution {
    public String replaceWords(List<String> dictionary, String sentence) {
        Trie trie = new Trie();
        for (String word : dictionary) {
            trie.add(word);
        }
        List<String> ans = new ArrayList<>();
        for (String word : sentence.split(" ")) {
            ans.add(trie.searchPrefix(word));
        }
        return String.join(" ", ans);
    }
}
