class Robot implements Comparable<Robot> {
    int position, health, index;
    char direction;

    Robot(int position, int health, int index, char direction) {
        this.position = position;
        this.health = health;
        this.index = index;
        this.direction = direction;
    }

    @Override
    public int compareTo(Robot other) {
        return this.position - other.position;
    }
}

class Solution {
    public List<Integer> survivedRobotsHealths(int[] positions, int[] healths, String directions) {
        List<Robot> robots = new ArrayList<>();
        for (int i = 0; i < positions.length; i++) {
            robots.add(new Robot(positions[i], healths[i], i, directions.charAt(i)));
        }

        robots.sort(Comparator.comparingInt(r -> r.position));

        Deque<Robot> stack = new ArrayDeque<>();

        for (Robot robot : robots) {
            if (robot.direction == 'R') {
                stack.push(robot);
            } else {
                while (!stack.isEmpty() && stack.peek().direction == 'R' && stack.peek().health < robot.health) {
                    Robot r = stack.pop();
                    robot.health--;
                }

                if (!stack.isEmpty() && stack.peek().direction == 'R' && stack.peek().health == robot.health) {
                    stack.pop();
                } else if (!stack.isEmpty() && stack.peek().direction == 'R' && stack.peek().health > robot.health) {
                    stack.peek().health--;
                } else {
                    stack.push(robot);
                }
            }
        }

        List<Robot> survivors = new ArrayList<>(stack);
        survivors.sort(Comparator.comparingInt(r -> r.index));

        List<Integer> result = new ArrayList<>();
        for (Robot r : survivors) {
            result.add(r.health);
        }

        return result;
    }

    
}
