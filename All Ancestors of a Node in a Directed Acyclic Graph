public class Solution {
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        int[] indegrees = new int[n];
        Map<Integer, List<Integer>> adjList = new HashMap<>();
        
        for (int i = 0; i < n; i++) {
            adjList.put(i, new ArrayList<>());
        }
        
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adjList.get(u).add(v);
            indegrees[v]++;
        }
        
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (indegrees[i] == 0) {
                q.add(i);
            }
        }
        
        List<Set<Integer>> ans = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            ans.add(new HashSet<>());
        }
        
        while (!q.isEmpty()) {
            int now = q.poll();
            
            for (int child : adjList.get(now)) {
                ans.get(child).add(now);
                ans.get(child).addAll(ans.get(now));
                indegrees[child]--;
                if (indegrees[child] == 0) {
                    q.add(child);
                }
            }
        }
        
        List<List<Integer>> result = new ArrayList<>();
        for (Set<Integer> set : ans) {
            List<Integer> list = new ArrayList<>(set);
            Collections.sort(list);
            result.add(list);
        }
        
        return result;
    }
}
