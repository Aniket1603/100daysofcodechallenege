class Solution {
class Pair
{
    int i,j,dist;
    Pair(int i, int j,int dist)
    {
       this.i=i;
       this.j = j;
       this.dist = dist;

    }
}


    public int maximumSafenessFactor(List<List<Integer>> grid) {
if(grid.get(0).get(0)==1 || grid.get(grid.size()-1).get(grid.size()-1)==1 )

       return 0; 
       int [][] distance = getDistance(grid);
       return getMaxPath(distance);
    }
   
private int getMaxPath(int [][] grid)
{
PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->-Integer.compare(a.dist,b.dist));
int[][]distance = new int [grid.length][grid.length];
pq.add(new Pair(0,0,grid[0][0]));
for(int[] i: distance)
{
    Arrays.fill(i,Integer.MIN_VALUE);
}

while(!pq.isEmpty())
{
    Pair p = pq.remove();
    int i=p.i,j=p.j,dist=p.dist;
     if(i-1>=0 && distance[i-1][j]<Math.min(dist,grid[i-1][j]))
   {
    distance[i-1][j]=Math.min(dist,grid[i-1][j]);
    pq.add(new Pair (i-1,j,distance[i-1][j]));
   }
   if(j-1>=0 && distance[i][j-1]<Math.min(dist,grid[i][j-1]))
   {
    distance[i][j-1]= Math.min(dist,grid[i][j-1]);
    pq.add(new Pair (i,j-1,distance[i][j-1]));
   }
   if(i+1<grid.length && distance[i+1][j]<Math.min(dist,grid[i+1][j]))
   {
    distance[i+1][j]= Math.min(dist,grid[i+1][j]);
    pq.add(new Pair (i+1,j,distance[i+1][j]));
   }
   if(j+1<grid.length && distance[i][j+1]<Math.min(dist,grid[i][j+1]))
   {
    distance[i][j+1]= Math.min(dist,grid[i][j+1]);
    pq.add(new Pair (i,j+1, distance[i][j+1]));
   }
}
return distance[grid.length-1][grid.length-1];
}

    private int[][]getDistance(List<List<Integer>>grid)
    {
        int[][]distance = new int[grid.size()][grid.size()];
        for(int[] i: distance)
        {
            Arrays.fill(i,-1);
        }
        Queue<Pair> q = new LinkedList<>();
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid.size();j++)
            {
                if(grid.get(i).get(j)==1)
                {
                    q.add(new Pair(i,j,0));
                    distance[i][j]=0;
                }
            }
        }
while(!q.isEmpty())
{
   Pair p = q.remove();
   int i= p.i,j=p.j,dist=p.dist; 
   if(i-1>=0 && grid.get(i-1).get(j)==0 && distance[i-1][j]==-1)
   {
    distance[i-1][j]= dist +1;
    q.add(new Pair (i-1,j,dist+1));
   }
   if(j-1>=0 && grid.get(i).get(j-1)==0 && distance[i][j-1]==-1)
   {
    distance[i][j-1]= dist +1;
    q.add(new Pair (i,j-1,dist+1));
   }
   if(i+1<grid.size()&& grid.get(i+1).get(j)==0 && distance[i+1][j]==-1)
   {
    distance[i+1][j]= dist +1;
    q.add(new Pair (i+1,j,dist+1));
   }
   if(j+1<grid.size() &&grid.get(i).get(j+1)==0 && distance[i][j+1]==-1)
   {
    distance[i][j+1]= dist +1;
    q.add(new Pair (i,j+1,dist+1));
   }
}
return distance;
    }
}
