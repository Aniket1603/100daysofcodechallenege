public class Solution {
    public int findMaximizedCapital(int k, int w, int[] profits, int[] capital) {
        int current = w;

       
        List<int[]> projects = new ArrayList<>();
        for (int i = 0; i < profits.length; i++) {
            projects.add(new int[]{profits[i], capital[i]});
        }
        projects.sort((a, b) -> a[1] == b[1] ? b[0] - a[0] : a[1] - b[1]);

       
        PriorityQueue<Integer> maxProfitHeap = new PriorityQueue<>(Collections.reverseOrder());
        
       
        int index = 0;
        for (int i = 0; i < k; i++) {
           
            while (index < projects.size() && projects.get(index)[1] <= current) {
                maxProfitHeap.add(projects.get(index)[0]);
                index++;
            }

          
            if (maxProfitHeap.isEmpty()) {
                break;
            }

            current += maxProfitHeap.poll();
        }

        return current;
    }

    
}
